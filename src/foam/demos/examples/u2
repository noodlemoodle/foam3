## U2/U3
##  Background
U3 is FOAM's native UI library.
It is named U3 because it is FOAM's third UI library.
The first UI library was template based and U2, FOAM's second UI library, was based on an Internal Domain Specific Language (IDSL) or Embedded Domain Specific Language (EDSL).
This IDSL is used to describe virtual DOM structures.
DOM is the browser's native API for manipulating the page contents, and stands for Document Object Model.
A Virtual-DOM is an API which mirrors the real DOM API but does so in JS.
U3 is a simplification of U2.
<br>
The advantages of a Virtual-DOM are:
<ol>
<li>It is more secure because, unlike template-based approaches, it isn't prone to Cross-Site-Scripting (XSS) attacks.</li>
<li>It can offer higher-level features and abstracts over browser incompatibilities.</li>
<li>It doesn't require a template parser, which can either make builds faster or the download size smaller, depending on where the template parsing is performed.</li>
<li>It offers higher-level features which enable you to perform some functions with less code.</li>
</oll>
Improved security was the primary motivation for U2.
Simplified use over U2, without losing any of U2's security benefits, was the primary motivation for U3.

All U2/3 components extend foam.u2.Element, which loosely modelled after the DOM <a href="https://www.w3schools.com/jsref/dom_obj_all.asp">Element<a> class.
--
add('testing');

##   U3 vs. Real DOM
The first example creates a ul tag with 10 li children using the browser's build-in DOM API.
The second example does the same thing using U3. Notice how the two examples are very similar.
--
console.profile('p1');
function test1() {
  var startTime = performance.now();
  var node = document.createElement("UL");               // Create a <ul> node
  for ( var i = 0 ; i < 10 ; i++ ) {
    var li = document.createElement("LI")
    li.appendChild(document.createTextNode("text" + i)); // Append an <li>
    node.appendChild(li);
  }
  start().call(function() { this.element_.appendChild(node); });
  log('DOM ', performance.now() - startTime);
}
test1();
console.profileEnd('p1');


console.profile('p2');
function test2() {
  var startTime = performance.now();
  var node = foam.u2.Element.create({nodeName: 'UL'}); // Create a <ul> node
  for ( var i = 0 ; i < 10 ; i++ )
    node.start('li').add("text" + i).end();            // Append an <li>

  add(node);
  log('U3 ', performance.now() - startTime);
}
test2()
console.profileEnd('p2');

##   DSL
The U3 library is structured as a Fluent Internal Domain Specific Language (DSL).
<br>
It is Domain-Specific because, rather than being a general all-purpose language,
it is designed for the specific domain of creating DOM User Interfaces.
<br>
It is an Internal DSL (Domain Specific Language) because rather than inventing
a whole new (and probably limited) language, it reuses a host language (Javascript, in our case).
This means that there is no new syntax to learn, just new methods. Also, it means that you
have the full power of our host language at your disposal.
<br>
It is Fluent because each method return's 'this' so that they can be chained.
So instead of doing:
--
var tag = this.start('blockquote');
tag.add('foo');
var tag2 = tag.start('blockquote');
tag2.add('bar');
tag.add('baz');

// You can just do:
this.start('blockquote').
  add('foo').
  start('blockquote').
    add('bar').
  end().
  add('baz').
end();

// The Fluent style more closely models the nested structure of HTML without requireming
// the creation of temporary variables for each intermediate Element.
--
##   Intro1
##   Hello World!
Let's use U3 to say hello
--
add(foam.u2.Element.create().add('Hello World!'));
##   nodeName
If you inspect the HTML output from the Hellow World! example, you'll notice that it is a div tag.<br>
However, if you want to change it to another type, you can specify the node's name with the nodeName property.
An Element's nodeName can't be changed after it is created. It must either be set as an argument of create(),
or by changing the default value of the 'nodeName' property.
--
add(foam.u2.Element.create({nodeName: 'b'}).add('Hello World!'));

start().br().end();

foam.CLASS({
  name: 'Example',
  extends: 'foam.u2.Element',
  properties: [
    [ 'nodeName', 'b' ]
  ],
  methods: [
    function render() {
      this.add('Hello World (from a component)!');
    }
  ]
});

tag({class: 'Example'});

##  Short Form
Given it is so common to want to create new Elements from within other Elements, Element has a method called start()
which is used to add another Element to it.
--
start('b').add('Hello again!').end();
##  Tag
In the above example we wanted to add text inside of the <b> tag, so we started with start() and then called add() before end()-ing the tag.
But if you didn't need to add() anything inside the tag, you could just use the tag() method. The next two lines are equivalent:
--
start('input').end();
tag('input');
##   ControllerMode
There are three ControllerModes, defined by the foam.u2.ControllerMode enum:
CREATE, VIEW, and EDIT.
The ControllerMode specifies the type of operation being performed at the whole
Object level.
CREATE means a new objects is being created.
VIEW means an objects is being viewed, but not edited.
EDIT means an existing object is being updated.
Some fields, like the primary keys, don't make sense to be edited after an
object is created.
--
foam.CLASS({
  name: 'Example',
  properties: [
    { name: 'id',    value: 'id', updateVisibility: 'RO' },
    { name: 'prop1', value: 'value1', },
    { name: 'prop2', value: 'value2', visibility: 'RO' }
  ]
});

var e = Example.create();

foam.u2.ControllerMode.VALUES.forEach(m => {
  start().
    start('h3').add(m.name).end().
    startContext({controllerMode: m}).
      add(e).
    endContext().
  end();
});

##   DisplayMode
Display modes are assigned to individual property views to control if they're shown,
and if they are, if they're read-only, read-write or disabled.
DisplayMode can be further restricted by the ControllerMode. For example,
even if a Property has a RW (Read-Write) display mode, it will still be in
read-only mode when the VIEW ControllerMode is selected.
TODO: debug
--
foam.CLASS({
  name: 'Example',
  properties: [
    { name: 'default',  value: 'default' },
    { name: 'rw',       value: 'rw',       visibility: 'RW' },
    { name: 'disabled', value: 'disabled', visibility: 'DISABLED' },
    { name: 'ro',       value: 'ro',       visibility: 'RO'},
    { name: 'hidden',   value: 'hidden',   visibility: 'HIDDEN' },
    { name: 'hidden2',  hidden: true }
  ]
});

var e = Example.create();

add(e);

foam.u2.ControllerMode.VALUES.forEach(m => {
  start().
    start('h3').add(m.name).end().
    startContext({controllerMode: m}).
      add(e).
    endContext().
  end();
});

##   Hidden Properties
From the previous example, we could see that there are two different ways to
hide a Property:
  visibility: 'HIDDEN
  hidden: true
The difference is that with visibility: it just means that a property is
currently hidden, but something could change so that you could see it,
whereas hidden: true means the view will never be shown. From the point of
view of views like DetailView, hidden: true properties don't exist.
--
foam.CLASS({
  name: 'Example',
  properties: [
    { class: 'Boolean', name: 'enable', value: '' },
    { name: 'prop1', hidden: true },
    { name: 'prop2', visibility: 'HIDDEN' },
    {
      name: 'prop3',
      value: 'here I am',
      visibility: function(enable) {
        return enable ?
          foam.u2.DisplayMode.RW :
          foam.u2.DisplayMode.HIDDEN ;
      }
    }
  ]
});

tag(Example);

##   Borders
A Border is a component meant to be a container for other elements. Examples might include
a card, a shadow border, a tab-control, etc.
If an element has a 'content' element, then when children are add()'ed to the element,
they will be inserted into the 'content' element, rather that at the end of the element,
as is normal.
--
foam.CLASS({
  name: 'CardBorder',
  extends: 'foam.u2.Element',
  css: `
    ^ {
      background:$white;
      border-radius: 3px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.38);
      margin: 8px;
      transform-origin: top left;
      display: inline-block;
    }
    ^content { padding: 6px; width: 300px; height: 200px; background-color:$white; }
  `,
  methods: [
    function render() {
      this.
        addClass().
        start('div', null, this.content$).
          addClass(this.myClass('content')).
        end().
        start().
          add('footer').
        end();
    }
  ]
});

add(CardBorder.create().add('content').tag('br').add('more content').tag('br').add('even more content'));

##   ViewSpec
##   Tooltips
You can set the tooltip for an element by setting the 'tooltip' property
--
start('div', {tooltip: 'My Tooltip'}).add('hover for tooltip').end();
// or
add(foam.u2.Element.create({nodeName: 'b', tooltip: 'tooltip'}).add('hover for tooltip2'));

##   shown / show() / hide()
--
start('div', {shown: false}).add('shown: false').end(); // won't be shown
start('div', {shown: true}).add('shown: true').end();   // will be shown
start('div').hide().add('hide()').end();                // won't be shown
start('div').hide().show().add('show()').end();         // will be shown

##   focused / focus() / blur()
--
start('input').attrs({value: 'not focused'}).end();
add(' ');
start('input').attrs({value: 'focused'}).focus().end();

##   Creating a Component
<ol>
  <li>Create a foam.CLASS()
  <li>Extend foam.u2.Element, foam.u2.View (if you want to be a view for another 'data' object),
  foam.u2.Controller (if you want to be a view for yourself), or some other foam class that directly
  or indirection extends foam.u2.Element.
  <li>Set your 'nodeName' property's value: if you desire to be something other than 'div'.
  <li>Define component specific CSS with the css: property, if required.
  <li>Define a render() method to add children, css classes, direct css styles, DOM listeners, and
  set required html attributes.
</ol>

--
foam.CLASS({
  name: 'ExampleElement',
  extends: 'foam.u2.Element',
  // extends: 'foam.u2.View',
  // extends: 'foam.u2.Controller',

  css: `
    ^ {
      font: Roboto;
      margin: 4px;
    }
  `,

  properties: [
    [ 'nodeName', 'i' ] // defaults to 'div'
  ],

  methods: [
    function render() {
      this.
        addClass(). // short for addClass(this.myClass())
        style({border: '2px solid gray', background: 'lightgray'}).
        attrs({comment:  'something'}).
        add('some text ').
        start('b').
          add('some bold text').
        end().
        br().
        on('click', this.onClick);
    }
  ],

  listeners: [
    {
      name: 'onClick',
      code: function() { window.alert('clicked'); }
    }
  ]
});

tag({class:'ExampleElement'});
// Or:
// tag(ExampleElement)

##    render()
The render() method is where an Element's DOM/HTML is rendered/created.
--
foam.CLASS({
  name: 'Sample',
  extends: 'foam.u2.Element',

  methods: [
    function render() {
      this.setID(456).addClass('chapter').style({padding: '4px'}).on('click', () => alert('clicked')).
      start('img').attr('src','/foam3/src/foam/u2/images/foam_red.png').end().
      tag('hr').
      start('center').add('FOAM Logo').end();
    }
  ]
});

tag({class: 'Sample'});

##   Keyboard Shortcuts
--
foam.CLASS({
  name: 'KeyboardTest',
  extends: 'foam.u2.Controller',
  properties: [
    { class: 'Int', name: 'count', value: 5 }
  ],
  methods: [
    function render() { this.add(this.COUNT, ' ', this.INCR); }
  ],
  actions: [
   {
     name: 'incr',
     code: function() { this.count++; },
     keyboardShortcuts: [ '+' ]
   }
  ]
});
var k = KeyboardTest.create();
tag(k);

##   el() / .element_
Sometimes it is necessary to access the real underlying DOM node.
--
// U2 or U3
var a = start('b');
a.el().then(el => el.innerHTML = 'foobar');

start().br().end();

// U3
var a = start('b');
a.element_.innerHTML = 'foobar2';

##   id
You can set an element's id, but keep in mind that it isn't normally a good idea to do so because
it prevents you from instantiating two instances of your component.
--
start('b', {id: 'myId1'}).add('inspect me to see my id').end();
add().br();
start('i').setID('myId2').add('this method also works').end();

##   E()
##   Children
##    start() / end()
start() starts a new tag and end() closes it. So start('b').<stuff>.end() is the
equivalent of <b>stuff</b>.
--
start('b').add('bold text').end().br().start('i').add('italic text').end();
start().
  style({background: 'pink'}).
  on('click', function() { window.alert('clicked'); }).
  add('text').
  start('pre').add('nested').end().
end();

##    br()
br() is just short form for tag('br'), the html line-break element.
--
start().
  add('line 1').
  start('br').end(). // long form
  add('line 2').
  tag('br').         // medium form
  add('line 3').
  br().              // short form
  add('line 4').
end();
##    nbsp()
no-breaking space, the same as adding &amp;nbsp; to your html
--
start('div')
  .style({width: 100})
  .add('Breaking space').br()
  .add('NonBreaking').nbsp().add('space').br().
end();

##    remove()
Calling remove() on an Element will remove it from the DOM.
--
/*
  TODO: Fix
  This version doesn't work because 'this' in the callback binds to the real
  DOM element rather that the U2/U3 Element.
start().
  start().add('1 remove me X').on('click', function() { this.remove(); }).end().
  start().add('2 remove me X').on('click', function() { this.remove(); }).end().
  start().add('3 remove me X').on('click', function() { this.remove(); }).end().
end();
*/
// This works by capturing the correct 'this'
start().
  start().add('1 remove me X').call(function() { this.on('click', () => this.remove()); }).end().
  start().add('2 remove me X').call(function() { this.on('click', () => this.remove()); }).end().
  start().add('3 remove me X').call(function() { this.on('click', () => this.remove()); }).end().
end();

##    add()
--
foam.CLASS({
  name: 'Example',
  extends: 'foam.u2.Controller',

  properties: [
    { name: 'p1', value: 'p1' },
    { name: 'p2', value: 'p2' }
  ],

  methods: [
    function render() {
      // Add Properties
      this.add('P1: ', this.P1).br();
      this.add('P2: ', this.P2).br();

      // Add a String to the DOM:
      this.add('foo').br();

      // Or add multiple Strings at once:
      this.add('foo', ' bar', ' baz').br();

      // Or add multiple Literals at once:
      this.add('foo ', 42, ' ', true).br();

      // Or add an Array of values, including other Arrays
      this.add(['foo ', 42, ' ', 1, ' ', 2, ' ', 3]).br();

      // Or add multiple values, including Arrays:
      this.add('foo', ' bar ', [ 1, ' ', 2, ' ', 3]).br();

      // Slot
      this.add('p1: ', this.p1$).br();
      this.add('p2: ', this.p2$).br();

      // Function
      this.add(function(p1, p2) { this.add('function: ' + p1 + ' ' + p2); }).br();

      // Dynamic Function
      this.add(this.dynamic(function(p1, p2) { this.add('dynamic: ' + p1 + ' ' + p2); })).br();

      // Promises
      this.add('A Resolved Promise: ', Promise.resolve('already resolved')).br();

      var promise = new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve("resolved in future");
        }, 3000);
      });
      this.add('An Unresolved Promise: ', promise).br().br();

      // FObject
      this.add(foam.util.Timer.create()).br();
    }
  ]
});
tag(Example);

##     adding properties
##     toE()
If an object implements the toE(args, X) function, it can control which
view is used to when add()-ing it to a U3 Element.
--
foam.CLASS({
  name: 'Example',
  properties: [ 'p1', 'p2', 'p3' ]
});
// Will be added as a foam.u2.DetailView, since that's what FObject.toE() returns.
add(Example.create());

// Now let's create a sub-class which overrides toE() to return a SectionedDetailView:
foam.CLASS({
  name: 'Example2',
  extends: 'Example',
  methods: [
    function toE(args, X) {
      return foam.u2.detail.SectionedDetailView({data: this});
    }
  ]
});
add(Example2.create());

##     view:
It is the purpose of the view: Property Property to specify which View should be used for
viewing or editing this property inside a DetailView or custom View when the property is added
to the DOM with either cls.PROPERTY_CONSTANT or cls.PROPERTY_CONSTANT.__.
Normally, when you specify a Property's class:, a suitable default view: is automatically provided.
If however you would like to use a different View class, or even the same View class, but with a
different configuration, then you can specify your desired view with view:.

--
foam.CLASS({
  name: 'Example',
  properties: [
    { class: 'String', name: 'prop1', required: true, help: 'Some help' },
    { class: 'String', name: 'prop2', view: 'foam.u2.TextField' },
    { class: 'String', name: 'prop3', view: 'foam.u2.view.ValueView', value: 'read-only' },
    { class: 'String', name: 'prop4', view: { class: 'foam.u2.tag.TextArea', rows: 3, cols: 40 } },
    { class: 'String', name: 'prop5', view: { class: 'foam.u2.view.ChoiceView', choices: ['Yes', 'No'] } },
    { class: 'String', name: 'prop6', view: { class: 'foam.u2.view.RadioView', choices: ['Yes', 'No'] } }
  ]
});

var e = Example.create();
tag({class: 'foam.u2.DetailView', data: e});


// Now create a custom View
// Adding this.data.PROP1 adds just the View
// Adding this.data.PROP1.__ add the View wrapped in a PropertyBorder, which adds:
//  1. Display a Label from Property's label:
//  2. Display Units, if set in Property's units:
//  3. Show/Hide the View based on the Property's visibility:
//  4. Change the underlying View's Visibility to RO/RW/etc based on visibility:
//  5. Display error messages based on the Property's validateObj: & validationPredicates:
//  6. Add Property's help

foam.CLASS({
  name: 'ExampleView',
  extends: 'foam.u2.View',
  methods: [
    function render() {
      this.add('Prop1: ', this.data.PROP1);
      this.add('Prop2: ', this.data.PROP2);
      this.add(this.data.PROP1.__);
      this.add(this.data.PROP2.__);
    }
  ]
});

tag({class: 'ExampleView', data: e});

##    removeAllChildren()
Calling removeAllChilfen() will remove all of an Element's children.
--
start('b').
  add('Remove All Children').
  start().add('child1').end().
  start().add('child2').end().
  start().add('child3').end().
  call(function() {
    // Use => instead of function() so that 'this' is the U2/U3 Element
    // rather than the DOM element
    this.on('click', () => this.removeAllChildren());
  }).
end();

##    setChildren()
TODO: Is this needed? Is it used anywhere?
--

##   Styling
CSS styling can be added to your elements in two ways:
<ol>
  <li>By specifying in-lined CSS with the style() method.
  <li>By add a CSS class and then providing styling for that class in your component's css: block.
</ol>
##    style()
Use style() to add in-lined CSS styling to a parent start() tag.
--
start().style({background: 'pink', border: '2px solid black'}).add('styled content').end()
##    css:
The same output and styling as the above example, but using a css: block and named CSS Class.
--
foam.CLASS({
  name: 'CSSExample',
  extends: 'foam.u2.Element',
  css: `
    .myBlock {
      background: pink;
      border: 2px solid black;
    }
  `,
  methods: [
    function render() {
      this.start().addClass('myBlock').add('styled content').end();
    }
  ]
});
tag(CSSExample);

##    myClass()
The above example adds the CSS class name "myBlock" to the element to be styled,
and then adds a corresponding styling block in its CSS section. This may seem
fine, but it introduces problems. Consider the following example which also
uses the 'myBlock' CSS classname:

--
foam.CLASS({
  name: 'CSSExample2',
  extends: 'foam.u2.Element',
  css: `
    .myBlock {
      color: red;
    }
  `,
  methods: [
    function render() {
      this.start().addClass('myBlock').add('more styled content').end();
    }
  ]
});
tag(CSSExample2);

add(`
Notice that it also has a pink background and
black border. CSS has leaked from CSSExample into CSSExample2.
This happens because CSS has a global namespace and names can leak between
components. Two component authors might choose common CSS classnames like:
'important', 'left-panel', 'content', 'header', 'section', etc. and the result
would be the corruption of both of their components.

To work around this problem, U3 introduces scoped CSS class names. This allows
component writers to choose whatever class names they like without fear of
conflict with other components.

This works by calling this.myClass('classname') which will convert 'classname' into a component
specific CSS classname. It does this by prefixing the classname with the FOAM class id, which
includes the class package and name, but with periods (.) replaced with dashes (-).

In the css: block, we use the '^' character to indicate class names that have been scoped with myClass().
So, instead of '.myBlock', which would be unscoped, we use '^myBlock', which is scoped to the current
component's CSS.

Ex.:
`);
foam.CLASS({
  name: 'CSSExample3',
  extends: 'foam.u2.Element',
  css: `
    ^myBlock {
      background: pink;
      border: 2px solid black;
    }
  `,
  methods: [
    function render() {
      this.start().addClass(this.myClass('myBlock')).add('more styled content').end();
    }
  ]
});
tag(CSSExample3);

foam.CLASS({
  name: 'CSSExample4',
  extends: 'foam.u2.Element',
  css: `
    ^myBlock {
      color: red;
    }
  `,
  methods: [
    function render() {
      this.start().addClass(this.myClass('myBlock')).add('more styled content').end();
    }
  ]
});
tag(CSSExample4);

add(`
Notice that the last two examples each use the CSS classname 'myBlock' but don't
conflict with each other and neither leaks CSS to/from the other.

If you inspect the CSS from the last example, you'll see that it's actually 'CSSExample4-myBlock'.
If it had been in package: 'com.acme', then it would have been 'com-acme-CSSExample4-myBlock'.
`);

##    CSS Variables
##    inheritCSS
By default Element sub-classes inherit the CSS of their parent classes, but if the inheritCSS
property is set to false, then CSS isn't inherited and the Element class starts from a clean slate.
--
foam.CLASS({
  name: 'ParentElement',
  extends: 'foam.u2.Element',
  css: `
    ^ { background: pink; }
  `
});


foam.CLASS({
  name: 'NormalChildElement',
  extends: 'ParentElement',
  methods: [
    function render() {
      this.addClass().add('InheritCSS: ', this.model_.inheritCSS);
    }
  ]
});


foam.CLASS({
  name: 'NoInheritCSSChildElement',
  extends: 'ParentElement',
  inheritCSS: false,
  css: '^ { color: red; }',
  methods: [
    function render() {
      this.addClass().add('No-inheritCSS: ', '' + this.model_.inheritCSS);
    }
  ]
});

log(NoInheritCSSChildElement.model_.inheritCSS);

start({class: 'NormalChildElement'}).end();
start({class: 'NoInheritCSSChildElement'}).end();

// TODO: fix, isn't working

##   CSS Classes
##    addClass() / addClasses()
##    enableClass()
--
foam.CLASS({
  package: 'some.good.package',
  name: 'Test',
  extends: 'foam.u2.Element',
  css: `
    ^ { background: pink; }
    ^subsection { background: lightblue; }
  `,
  classes: [
    {
       name: 'SubTest',
       extends: 'foam.u2.Element',
       css: `
         ^ { background: lightGreen; }
       `,
       methods: [
         function render() {
           this.SUPER();
            this.
              addClass(this.myClass()).
              add(this.myClass());
         }
       ]
    }
  ],
  methods: [
    function render() {
      this.SUPER();
      this.
        addClass(this.myClass()).
        add(this.myClass()).
        start().
          addClass(this.myClass('subsection')).
          add(this.myClass('subsection')).
        end();
      this.add(this.SubTest.create({}, this));
    }
  ]
});
add(some.good.package.Test.create());
##    removeClass()
RemoveClass() removes a CSS class.
--
foam.CLASS({
  name: 'Example',
  extends: 'foam.u2.Controller',
  css: `
    .important { color: red }
  `,
  methods: [
    function render() {
      this.addClass('important').add('status ').add(this.REMOVE_CLS);
    }
  ],
  actions: [
    {
      name: 'removeCls', // Don't name removeClass to avoid name conflict
      labe: 'Remove Class',
      code: function() { this.removeClass('important'); }
    }
  ]
});

tag(Example);

##   Attributes
##    attr() & setAttribute()
attr() and setAttribute() are the same, with setAttribute() being for DOM compatibility.
--
start('img').attr('src', '/foam3/src/foam/u2/images/foam_red.png').end();
start('img').setAttribute('src', '/foam3/src/foam/u2/images/foam_red.png').end();
##    attrs()
--
start('img').attrs({
  src: '/foam3/src/foam/u2/images/foam_red.png',
  alt: 'foam logo',
  height: 100
}).end();
##    removeAttribute()
--
##   Control Flow
##    repeat()
--
start('ul').repeat(1, 10, function(i) { this.start('li').add(i).end(); }).end();

##    call()
--
start()
  .call(function() { this.add('call'); })
.end();

##    callIf
--
start()
  .callIf(true,  function() { this.add('true'); })
  .br()
  .callIf(false, function() { this.add('false'); })
.end();

##    callIfElse
--
start()
  .callIfElse(true,  function() { this.add('true');  }, function() { this.add('false'); })
  .br()
  .callIfElse(false, function() { this.add('false'); }, function() { this.add('false'); })
.end();

##    forEach()
--
start('ul').forEach(['Apples', 'Bananas', 'Oranges'], function(i) { this.start('li').add(i).end(); }).end();
##   Events
##    on() & addEventListener
on() and onEventListener() are the same, with onEventListener() being for DOM compatibility.
--
start('a').add('click me').on('click', function() { window.alert('clicked'); }).end();

##    removeEventListener()
Provided for compatibility with DOM, but rarely used.
--
foam.CLASS({
  name: 'RemoveEventListenerDemo',
  extends: 'foam.u2.Element',
  methods: [
    function render() {
      this.on('click', this.onClick).add('click me (once)');
    }
  ],
  listeners: [
    function onClick() {
      log('clicked, removing listener');
      this.removeEventListener('click', this.onClick);
    }
  ]
});

tag(RemoveEventListenerDemo);

##    onKey
--
foam.CLASS({
  name: 'OnKeyDemo',
  extends: 'foam.u2.Controller',

  properties: [
    {
      class: 'String',
      name: 'value1',
      value: 'value1',
      onKey: true
    },
    {
      class: 'String',
      name: 'value2',
      value: 'value2',
      // onKey: false // not needed, as false is the default
    }
  ],

  methods: [
    function render() {
      this.add(this.VALUE1, this.VALUE2);
      this.tag(this.VALUE2, { onKey: true});
      this.tag({class: 'foam.u2.TextField', onKey: true,  data$: this.value1$});
      this.tag({class: 'foam.u2.TextField', onKey: false, data$: this.value1$});
      this.br().add('value1: ', this.value1$).br().add('value2: ', this.value2$);
    }
  ]
});

tag({class: 'OnKeyDemo'});

##    DAOs
Let's create a DAO with some sample data to work with:
--
foam.CLASS({
  name: 'DAOSampleData',
  properties: [
    { class: 'Int', name: 'id' }, 'name', 'value'
  ],
  methods: [
    function toSummary() { return this.id + ' ' + this.value; }
  ]
});

globalThis.dao = foam.dao.EasyDAO.create({
  of: DAOSampleData,
  daoType: 'MDAO',
  testData: [
    { id: 1, name: 'John',  value: 'value1' },
    { id: 2, name: 'John',  value: 'value2' },
    { id: 3, name: 'Kevin', value: 'value3' },
    { id: 4, name: 'Kevin', value: 'value4' },
    { id: 5, name: 'Larry', value: 'value5' },
    { id: 6, name: 'Linda', value: 'value6' }
  ]
});

##     select
--
var dao = globalThis.dao;
// Now, to add the data to our view, we can just call dao.select():
add('Example 1');
start('ul').call(function() {
  dao.select(d => {
    this.start('li').add(d.id, ' ', d.name, ' ', d.value).end();
  });
});

// That works great, but has one limitation: it's static. If the data in the DAO
// updates, the view won't, it will just remain the same forever. Sometimes, that's
// what you want, but if you wanted the view to update whenever the DAO updated,
// then instead call the Element.select() method:

add('Example 2');
start('ul')
  .select(dao, function(d) {
    this.start('li').add(d.id, ' ', d.name, ' ', d.value).end();
  })
.end();

// Now, if we add more data in the future, notice that only the second list
// updates:

dao.put(DAOSampleData.create({id: 999, name: 'Superman', value: 'Hero'}));

start('a').add('click to add more data').on('click', function() {
  for ( let i = 0 ; i < 10 ; i++ ) {
    window.setTimeout(() => {
      var j = Math.floor(Math.random() * 1000);
      var d = DAOSampleData.create({id: j, name: 'Mr. ' + j, value: 'value ' + j});
      dao.put(d);
    }, 250 * i);
  }
}).end();

##   startContext() / endContext()
--
foam.CLASS({
  name: 'Test',
  properties: [ 'a', 'b' ]
});

var t = Test.create();

start().
  startContext({data: t}).
    add('A: ', t.A).br().add(' B: ', t.B).
  endContext().
end();

##   i18n
##    Messages
##    translate()
The easiest way is in your view which adds the data to the GUI, instead
of calling .add(), you call .translate() instead.
The first argument of translate() is a suitable translation key, and the
second argument is the default English value that you would have add()'ed.
--

foam.CLASS({
  name: 'SampleTranslationData',
  properties: [
    'id', 'label'
  ]
});

var dao = foam.dao.EasyDAO.create({
  of: SampleTranslationData,
  daoType: 'MDAO',
  testData: [
    { id: 'key1', label: 'label1' },
    { id: 'key2', label: 'label2' },
    { id: 'key3', label: 'label3' }
  ]
});

// Gives untranslated values:
add(E().select(dao, function(d) {
  this.E().add(d.id, ' ', d.label);
}));

add(E('hr'));

// create a simple mock translationService
var mockTranslationService = {
  getTranslation: function(_, _, def) { return def + ' en français'; }
};

// Gives translated values:
add(E().startContext({translationService: mockTranslationService}).select(dao, function(d) {
  this.add(d.id, ' ').translate('SampleTranslationData.' + d.id + '.label', d.label);
}));

##   write()
The Element.write() method appends to Element to the end of the document body.
This is typically only used for debugging purposes, not in production code.
--
foam.u2.Element.create().start().add('Here I am, way at the bottom of the page!').end().write();

##   Tags
Tags let you register U3 Elements to replace regular DOM tags.
For example, you might have a custom ImageView that you would like
to use as a replacement whenever regular <img> tags are added.
--
##    registerElement
The Context method 'registerElement' can be used to declare that a specified
Element subclass should be transparently used whenever an tag is created
with the specified node name.
--
foam.CLASS({
  name: 'Blink',
  extends: 'foam.u2.Element',
  properties: [
    [ 'nodeName', 'span' ],
    { class: 'Boolean', name: 'on' }
  ],

  methods: [
    function render() {
      // this.show(this.on$);
      // This works better than previous line because it doesn't cause the output to grow and shrink
      this.style({visibility: this.on$.map(s => s ? '' : 'hidden')});
      this.toggle();
    }
  ],

  listeners: [
    {
      name: 'toggle',
      isMerged: true,
      mergeDelay: 500,
      code: function() { this.on = ! this.on; this.toggle(); }
    }
  ]
});

foam.__context__.registerElement(Blink, 'blink');
start('blink').add('blinking').end();

##    elementForName
ElementForName is the reverse of registerElement. It is used internally in FOAM
to determine if a node/tag name has a registered class associated with it.
Isn't used directly by application developers.
--
add(foam.__context__.elementForName('blink').id);

##    attributes
If a property has 'attribute: true' it is treated as a psedo-attribute and can
be set with with the setAttribute(), attr(), and attrs() methods.
This is done for DOM compatibility.
For example, if we had registered an ImageView to replace <img> tags, then:
start('img').attr('src', 'http://acme.com/logo.png').end()
when we set the 'src' attribute, it would instead set the value of the
'src' Property.
--

##   View
The foam.u2.View class extends Element and adds a property named 'data', which it exports.
Views act as the display component (view) for their data. This is the standard MVC
pattern where the View is the View, and the 'data' is the Model.
--
foam.CLASS({
  name: 'Test',
  properties: [ 'a', 'b' ]
});

var t = Test.create();

start().
  startContext({data: t}).
    add('A: ', t.A).br().add(' B: ', t.B).
  endContext().
end();

// The above code is the same as the startContext() / endContext() example, but
now let's create a View for Test objects so we have the same functionality
as a reusable component without having to use start/endContext explicitly:

foam.CLASS({
  name: 'TestView',
  extends: 'foam.u2.View',
  methods: [
    function render() {
      this. add('A: ', this.data.A).br().add(' B: ', this.data.B);
    }
  ]
});

tag(TestView.create({data: t}));

##    fromProperty()
When Elements are used to view Property values, the fromProperty() method is called
and provided the Property object that the view is being associated with.
This allows the view to optionally configure itself based on Property values.
Examples of properties that may be taken from the property include:
onKey, placeholder, displayWidth, size, min, max, of, daoKey, etc.
--
foam.CLASS({
  name: 'LabelledTextField',
  extends: 'foam.u2.View',

  properties: [
    { class: 'String', name: 'label' }
  ],

  methods: [
    function fromProperty(p) {
      this.label = p.label;
    },

    function render() {
      this.add(this.label, ': ');
      this.tag({class: 'foam.u2.tag.Input', data$: this.data$});
    }
  ]
});

foam.CLASS({
  name: 'LabelledTextFieldExample',
  extends: 'foam.u2.Controller',

  properties: [
    { class: 'String', name: 'firstName', view: 'foam.u2.TextField' },
    { class: 'String', name: 'lastName',  view: 'LabelledTextField' }
  ],

  methods: [
    function render() {
      this.add('First Name:', this.FIRST_NAME, this.LAST_NAME);

      this.tag('hr');

      var l = LabelledTextField.create({data$: this.firstName$});
      l.fromProperty(this.FIRST_NAME);
      this.tag(l);
    }
  ]
});

tag({class: 'LabelledTextFieldExample'});

##   Controller
The foam.u2.Controller class extends Element and exports itself as 'data'. Unlike Views, which
provide a view for some other piece of data, a Controller provides a view for itself. It may
however create sub-Views which it includes in its own rendering.
Lets revisit the same example from startContext() / endContext() and Views above,
but instead of having separate classes for Test and TestView, we'll combine the
two into a single TestController class:
--
foam.CLASS({
  name: 'TestController',
  extends: 'foam.u2.Controller',
  properties: [ 'a', 'b' ],
  methods: [
    function render() {
      this.add('A: ', this.A).br().add(' B: ', this.B);
    }
  ]
});

tag({class: 'TestController'});
##   Views
##    ActionView
Create an ActionView directly.
--
var timer = foam.util.Timer.create();
var av = foam.u2.ActionView.create({data: timer, action: timer.START});
tag(foam.u2.DetailView.create({data: timer}));
add(timer.time$);
tag('hr');
tag(av);
tag(foam.u2.ActionView.create({data: timer, action: timer.STOP}));
this.startContext({data: timer}).add(timer.I);

##   StackView
##   FObject View
FObject View.
--
foam.CLASS({
  name: 'FObjectViewExample',
  extends: 'foam.u2.Controller',

  properties: [
    { class: 'FObjectProperty', name: 'obj1', factory: function() { return foam.util.Timer.create(); } },
    { class: 'FObjectProperty', name: 'obj2', view: { class: 'foam.u2.view.FObjectView' }, factory: function() { return foam.util.Timer.create(); } },
  ],

  methods: [
    function render() {
      this.add('OBJ1:',this.OBJ1, 'OBJ2:', this.OBJ2);
    }
  ]
});

tag({class: 'FObjectViewExample'});


##   More
Example of defining tableColumns for use with a TableView.
--
foam.CLASS({
  name: 'TableColumnsExample',

  tableColumns: [ 'a', 'b', 'c' ],

  properties: [ 'id', 'a', 'b', 'c', 'x', 'y', 'z' ]
});
s
var t1 = foam.u2.table.TableView.create({data: foam.dao.MDAO.create({of: 'TableColumnsExample'})});
tag(t1).style({height: '200px'});

foam.CLASS({
  name: 'TableColumnsExampleSubClass',
  extends: 'TableColumnsExample',

  tableColumns: [ 'x', 'y', 'z' ],
});

var t2 = foam.u2.table.TableView.create({data: foam.dao.MDAO.create({of: 'TableColumnsExampleSubClass'})});
start(t2).style({height: '200px'});


##   Dynamic Content
Example of using obj.dynamic() to add dynamic DOM content.
--
foam.CLASS({
  name: 'Example',
  extends: 'foam.u2.Controller',

  properties: [
    { name: 'a', onKey: true },
    { name: 'b', onKey: true }
  ],

  methods: [
    function render() {
      this.a = 'foo'; this.b = 'a,b,c';
      this.add('A:', this.A, ' B: ', this.B).br().br();

      this.dynamic({
        pre:  function()     { console.log('pre-react'); },
        code: function(a, b) { console.log('React: ', a, b); },
        post: function()     { console.log('post-react'); }
      });

      this.start().add(this.dynamic(function(a, b) {
        this.add('Dynamic Test A+B a:', a, ', b:', b).br();
      })).end();

      this.tag('hr');

      this.start().add(function(a, b) {
        this.add('Function Test A+B a:', a, ', b:', b).br();
      }).end();

      this.tag('hr');

      this.start().add(function(a) {
        this.add('TEST A: ', a).br();
      }).end();

      this.start().add(function(b) {
        this.add('TEST B: ', b).br();
      }).end();

      this.tag('hr');

      this.start().add('Show (if a == "show"): ').add(function(a) {
        if ( a === 'show' ) this.add('SHOWING');
      }).end().br();

      this.tag('hr');

      this.add('Dynamic OL:').start('ol').
        add(this.dynamic(function(b) {
          b.split(',').forEach(i => this.start('li').add(i).end());
        })).
      end();

      this.add('Function OL:').start('ol').
        add(function(b) {
          b.split(',').forEach(i => this.start('li').add(i).end());
        }).
      end();

      this.tag('hr');

      this.b$.sub(() => { console.log('****', this.b$.get(), this.b); });
      this.add('select:').tag(foam.u2.tag.Select, {choices$: this.b$.map(b => b.split(',')) });

      this.add('END').br();
    }
  ],

  listeners: [
    function invalidate() { this.clearProperty('value'); this.value; }
  ]
});

add(Example.create());
